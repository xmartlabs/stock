// Mocks generated by Mockito 5.3.0 from annotations
// in stock/test/common_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stock/south_of_truth.dart' as _i4;
import 'package:stock/src/factory_fetcher.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FutureFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockFutureFetcher<Key, Output> extends _i1.Mock
    implements _i2.FutureFetcher<Key, Output> {
  MockFutureFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Output> Function(Key) get factory =>
      (super.noSuchMethod(Invocation.getter(#factory),
              returnValue: (Key key) => _i3.Stream<Output>.empty())
          as _i3.Stream<Output> Function(Key));
  @override
  set factory(_i3.Stream<Output> Function(Key)? _factory) =>
      super.noSuchMethod(Invocation.setter(#factory, _factory),
          returnValueForMissingStub: null);
}

/// A class which mocks [StreamFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamFetcher<Key, Output> extends _i1.Mock
    implements _i2.StreamFetcher<Key, Output> {
  MockStreamFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Output> Function(Key) get factory =>
      (super.noSuchMethod(Invocation.getter(#factory),
              returnValue: (Key key) => _i3.Stream<Output>.empty())
          as _i3.Stream<Output> Function(Key));
  @override
  set factory(_i3.Stream<Output> Function(Key)? _factory) =>
      super.noSuchMethod(Invocation.setter(#factory, _factory),
          returnValueForMissingStub: null);
}

/// A class which mocks [SourceOfTruth].
///
/// See the documentation for Mockito's code generation for more information.
class MockSourceOfTruth<Key, Output> extends _i1.Mock
    implements _i4.SourceOfTruth<Key, Output> {
  MockSourceOfTruth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Output?> Function(Key) get reader =>
      (super.noSuchMethod(Invocation.getter(#reader),
              returnValue: (Key key) => _i3.Stream<Output?>.empty())
          as _i3.Stream<Output?> Function(Key));
  @override
  set reader(_i3.Stream<Output?> Function(Key)? _reader) =>
      super.noSuchMethod(Invocation.setter(#reader, _reader),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> Function(Key, Output?) get writer => (super.noSuchMethod(
          Invocation.getter(#writer),
          returnValue: (Key key, Output? output) => _i3.Future<void>.value())
      as _i3.Future<void> Function(Key, Output?));
  @override
  set writer(_i3.Future<void> Function(Key, Output?)? _writer) =>
      super.noSuchMethod(Invocation.setter(#writer, _writer),
          returnValueForMissingStub: null);
}
